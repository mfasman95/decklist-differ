{"version":3,"sources":["Components/ComparisonTable.jsx","Components/DecklistInput.jsx","redux/actions/index.js","redux/reducers/decklists.js","redux/reducers/ui.js","redux/reducers/index.js","redux/index.js","Pages/Input/index.js","Pages/Input/Input.jsx","Pages/Display/Display.jsx","Pages/Display/index.js","serviceWorker.js","index.jsx","App.jsx"],"names":["ComparisonTable","_ref","decklistComparison","displayNoDifference","sortedDecklistComparison","Object","entries","sort","a","b","react_default","createElement","Table","responsive","className","scope","filter","_ref2","_ref3$","slicedToArray","left","right","map","_ref4","leftVal","rightVal","_ref5","name","_ref5$","key","maindeckStyle","height","sideboardStyle","DecklistInput","title","side","type","list","update","FormGroup","Label","for","Input","concat","id","placeholder","value","onChange","e","target","style","actionTypes","UPDATE_DECKLIST","SET_DISPLAY_NO_DIFFERENCE","actionCreators","updateDecklist","section","content","setDisplayNoDifference","bool","storedState","localStorage","getItem","initialState","JSON","parse","main","combineReducers","decklists","state","arguments","length","undefined","action","newState","objectSpread","defineProperty","setItem","stringify","ui","createStore","combinedReducers","connect","dispatch","history","Container","Row","Col","xs","Button","color","onClick","push","convertDecklistStringToObject","decklistString","split","reduce","currentObj","cardRow","trimmedRow","trim","string","numberOfCard","parseInt","numberOfCardString","toString","console","error","cardName","slice","compareDecklistStrings","decklistAString","decklistBString","decklistA","decklistB","_","union","keys","buildingObject","Boolean","window","location","hostname","match","ReactDOM","render","es","store","react_router_dom","basename","process","react_router","path","exact","component","Display","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.807c917a.chunk.js","sourcesContent":["import React from 'react';\nimport { Table } from 'reactstrap';\n\nconst calcRowStyle = (leftVal, rightVal) => {\n  if (leftVal === rightVal) return 'table-default';\n  if (leftVal > rightVal) return 'table-success';\n  return 'table-danger';\n};\n\nexport default ({ decklistComparison, displayNoDifference }) => {\n  const sortedDecklistComparison = Object.entries(decklistComparison).sort((a, b) => {\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n    return 0;\n  });\n\n  return (\n    <Table responsive className=\"table-bordered table-hover\">\n      <thead>\n        <tr>\n          <th scope=\"col\">Name</th>\n          <th scope=\"col\">Left</th>\n          <th scope=\"col\">Right</th>\n          <th scope=\"col\">Difference</th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          sortedDecklistComparison\n            .filter(([, {\n              left,\n              right,\n            }]) => (displayNoDifference ? true : left !== right))\n            .map(([name, {\n              left,\n              right,\n            }]) => (\n              <tr className={calcRowStyle(left, right)} key={name}>\n                <th scope=\"row\">{name}</th>\n                <td>{left}</td>\n                <td>{right}</td>\n                <td>{left - right}</td>\n              </tr>\n            ))\n        }\n      </tbody>\n    </Table>\n  );\n};\n","import React from 'react';\nimport {\n  FormGroup,\n  Label,\n  Input,\n} from 'reactstrap';\n\nconst mainPlaceholder = 'Insert the main deck here...';\nconst maindeckStyle = {\n  height: '600px',\n};\n\nconst sidePlaceholder = 'Insert the sideboard here...';\nconst sideboardStyle = {\n  height: '250px',\n};\n\nexport default ({\n  title,\n  side,\n  type,\n  list,\n  update,\n}) => (\n  <FormGroup>\n    <Label for=\"exampleText\"><h4>{title}</h4></Label>\n    <Input\n      className=\"form-control-lg\"\n      type=\"textarea\"\n      name={`${side}-${type}`}\n      id={`${side}-${type}-decklist`}\n      placeholder={type === 'main' ? mainPlaceholder : sidePlaceholder}\n      value={list}\n      onChange={e => update(e.target.value)}\n      style={type === 'main' ? maindeckStyle : sideboardStyle}\n    />\n  </FormGroup>\n);\n","const actionTypes = {\n  UPDATE_DECKLIST: 'UPDATE_DECKLIST',\n  SET_DISPLAY_NO_DIFFERENCE: 'SET_DISPLAY_NO_DIFFERENCE',\n};\n\nconst updateDecklist = (side, section, content) => ({\n  type: actionTypes.UPDATE_DECKLIST,\n  side,\n  section,\n  content,\n});\n\nconst setDisplayNoDifference = bool => ({ type: actionTypes.SET_DISPLAY_NO_DIFFERENCE, bool });\n\nconst actionCreators = {\n  updateDecklist,\n  setDisplayNoDifference,\n};\n\nexport default {\n  actionTypes,\n  actionCreators,\n};\n\nexport {\n  actionTypes,\n  actionCreators,\n};\n","import { actionTypes } from '../actions';\n\nconst initialStateKey = 'initialState';\n\nconst storedState = localStorage.getItem(initialStateKey);\n\nconst initialState = storedState !== null ? JSON.parse(storedState) : {\n  left: {\n    main: '',\n    side: '',\n  },\n  right: {\n    main: '',\n    side: '',\n  },\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.UPDATE_DECKLIST: {\n      const { side, section, content } = action;\n\n      const newState = {\n        ...state,\n        [side]: {\n          // maintain the existing lists\n          main: state[side].main,\n          side: state[side].side,\n          // only update the intended list\n          [section]: content,\n        },\n      };\n\n      localStorage.setItem(initialStateKey, JSON.stringify(newState));\n\n      return newState;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import { actionTypes } from '../actions';\n\nconst initialState = {\n  displayNoDifference: true,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_DISPLAY_NO_DIFFERENCE: {\n      const { bool } = action;\n\n      return {\n        ...state,\n        displayNoDifference: bool,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import { combineReducers } from 'redux';\nimport decklists from './decklists';\nimport ui from './ui';\n\nexport default combineReducers({\n  decklists,\n  ui,\n});\n","import { createStore } from 'redux';\nimport combinedReducers from './reducers';\n\nexport { actionCreators } from './actions';\n\nexport default createStore(combinedReducers);\n","import { connect } from 'react-redux';\nimport Input from './Input';\nimport { actionCreators } from '../../redux';\n\nconst mapStateToProps = state => ({\n  decklists: state.decklists,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  update: (side, section, content) => dispatch(\n    actionCreators.updateDecklist(side, section, content),\n  ),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Input);\n","import React from 'react';\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n} from 'reactstrap';\nimport { DecklistInput } from '../../Components';\n\nexport default ({ decklists, update, history }) => (\n  <Container>\n    <Row>\n      <Col xs=\"12\">\n        <br />\n        <Button color=\"primary\" onClick={() => history.push('/display')}>Compare Lists</Button>\n      </Col>\n    </Row>\n    <Row>\n      <Col xs=\"6\">\n        <h2>Left</h2>\n        <DecklistInput\n          title=\"Main Deck\"\n          side=\"left\"\n          type=\"main\"\n          list={decklists.left.main}\n          update={value => update('left', 'main', value)}\n        />\n        <hr />\n        <DecklistInput\n          title=\"Sideboard\"\n          side=\"left\"\n          type=\"side\"\n          list={decklists.left.side}\n          update={value => update('left', 'side', value)}\n        />\n      </Col>\n      <Col xs=\"6\">\n        <h2>Right</h2>\n        <DecklistInput\n          title=\"Main Deck\"\n          side=\"right\"\n          type=\"main\"\n          list={decklists.right.main}\n          update={value => update('right', 'main', value)}\n        />\n        <hr />\n        <DecklistInput\n          title=\"Sideboard\"\n          side=\"right\"\n          type=\"side\"\n          list={decklists.right.side}\n          update={value => update('right', 'side', value)}\n        />\n      </Col>\n    </Row>\n  </Container>\n);\n","import React from 'react';\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n} from 'reactstrap';\nimport { ComparisonTable } from '../../Components';\nimport _ from 'lodash';\n\nconst getAngry = string => console.error('OH NO!!', string);\n\nconst convertDecklistStringToObject = (decklistString) => {\n  const cards = decklistString.split('\\n');\n  const decklistObject = cards.reduce((currentObj, cardRow) => {\n    const trimmedRow = cardRow.trim();\n    if (trimmedRow === '') {\n      return currentObj;\n    }\n\n    const numberOfCard = parseInt(trimmedRow, 10);\n    const numberOfCardString = parseInt(trimmedRow, 10).toString();\n    if (numberOfCardString === 'NaN') {\n      getAngry(`${trimmedRow} does not have a valid number listed. Write your decklists in the following format:\n4 card name\n2 other card name\netc...\n`);\n    }\n\n    const cardName = trimmedRow.slice(numberOfCardString.length + 1);\n\n    return {\n      ...currentObj,\n      [cardName]: numberOfCard,\n    };\n  }, {});\n  return decklistObject;\n};\n\nconst compareDecklistStrings = (decklistAString, decklistBString) => {\n  const decklistA = convertDecklistStringToObject(decklistAString);\n  const decklistB = convertDecklistStringToObject(decklistBString);\n\n  const allCardNames = _.union(Object.keys(decklistA), Object.keys(decklistB));\n\n  return allCardNames.reduce((buildingObject, cardName) => ({\n    ...buildingObject,\n    [cardName]: {\n      left: decklistA[cardName] || 0,\n      right: decklistB[cardName] || 0,\n    },\n  }), {});\n};\n\nexport default ({\n  history,\n  decklists,\n  displayNoDifference,\n  setDisplayNoDifference,\n}) => (\n  <Container>\n    <Row>\n      <Col xs=\"12\">\n        <br />\n        <Button color=\"primary\" onClick={() => history.push('/')}>Go Back</Button>\n      </Col>\n    </Row>\n    <Row>\n      <Col xs=\"12\">\n        <hr />\n        <h4>\n          Main Decks\n          {' '}\n          <Button color=\"warning\" onClick={() => setDisplayNoDifference(true)}>Show No Difference</Button>\n          {' '}\n          <Button color=\"warning\" onClick={() => setDisplayNoDifference(false)}>Hide No Difference</Button>\n        </h4>\n        <ComparisonTable\n          decklistComparison={compareDecklistStrings(decklists.left.main, decklists.right.main)}\n          displayNoDifference={displayNoDifference}\n        />\n      </Col>\n    </Row>\n    <Row>\n      <Col xs=\"12\">\n        <h4>Sideboards</h4>\n        <ComparisonTable\n          decklistComparison={compareDecklistStrings(decklists.left.side, decklists.right.side)}\n          displayNoDifference={displayNoDifference}\n        />\n      </Col>\n    </Row>\n  </Container>\n);\n","import { connect } from 'react-redux';\nimport Display from './Display';\nimport { actionCreators } from '../../redux';\n\nconst mapStateToProps = state => ({\n  decklists: state.decklists,\n  displayNoDifference: state.ui.displayNoDifference,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setDisplayNoDifference: bool => dispatch(actionCreators.setDisplayNoDifference(bool)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Display);\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { Input, Display } from './Pages';\n\nexport default () => (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <div className=\"App text-center\">\n      <Route path=\"/\" exact component={Input} />\n      <Route path=\"/display\" component={Display} />\n    </div>\n  </BrowserRouter>\n);\n"],"sourceRoot":""}